#!/usr/bin/env zsh
readonly SCRIPT=$0
readonly SCRIPTPATH=${0:a}
readonly SOURCE=${SCRIPTPATH%/*}
readonly TARGET=$HOME

typeset -a files
files=(
  bin/chromium-default
  bin/fb2kadd
  bin/fb2kshoworhide
  bin/foobar2000
  bin/mediacontrol
  bin/rofi_run_custom_list
  bin/xinput_refresh
  "config/Code - OSS/User/settings.json"
  config/autostart/xresources.desktop
  config/fontconfig/conf.d/99-noto-color-emoji.conf
  config/fontconfig/conf.d/99-pxplus-disable-hint.conf
  config/gtk-3.0/gtk.css
  config/lf/lfrc
  config/mc/mc.keymap
  config/plasma-workspace/env/myenv.sh
  config/rofi/config.rasi
  config/rofi/theme.rasi
  config/Thunar/uca.xml
  config/khotkeysrc
  local/share/applications/custom/ark.desktop
  local/share/applications/custom/chromium-default.desktop
  local/share/applications/custom/dolphin.desktop
  local/share/applications/custom/foobar2000.desktop
  local/share/applications/custom/okular.desktop
  local/share/applications/custom/Ripcord.desktop
  local/share/file-manager/actions/add_to_foobar2000.desktop
  local/share/file-manager/actions/send_to_foobar2000.desktop
  local/share/icons/foobar2000.png
  "local/share/konsole/My Default.profile"
  "local/share/konsole/My Gruvbox.colorscheme"
  "local/share/konsole/My XFree.keytab"
  local/share/kservices5/ServiceMenus/foobar2000.desktop
  jupyter/nbconfig/notebook.json
  jupyter/jupyter_qtconsole_config.py
  jupyter/qtconsole.css
  gdbinit
  gitconfig
  inputrc
  lambda-term-inputrc
  latexmkrc
  lldbinit
  ocamlinit
  profile
  tmux.conf
  utoprc
  Xresources
  zshrc
)
readonly files

print_usage() {
  cat << EOF
Usage: $SCRIPT <COMMAND>

COMMANDS:
    install  Install config files to '$TARGET'.
    remove   Remove config files from '$TARGET'.
    help     Print this help.

Note that setup will only remove files that are linked to this path and
will only install files that do not already exist, meaning it is always
safe to run.
EOF
  exit $1
}

check_src_files() {
  local src=
  for f in $files; do
    src=$SOURCE/$f
    if [[ ! -e "$src" ]]; then
      echo "ERROR: expected source file '$src' does not exist"
      exit 1
    fi
  done
}

install() {
  local src=
  local target=
  local target_base=
  local installed=
  local exists=

  for f in $files; do
    src=$SOURCE/$f
    target=$TARGET/.$f
    target_base=${target%/*}
    if [[ -e "$target" ]]; then
      exists+=("$target")
    else
      [[ -d "$target_base" ]] || mkdir -p "$target_base"
      ln -s "$src" "$target"
      installed+=("$target")
    fi
  done

  echo "Already exist, remove and run again to install:"
  printf "    %s\n" $exists
  echo "Installed:"
  printf "    %s\n" $installed
}

remove() {
  local src=
  local target=
  local removed=
  local kept=

  for f in $files; do
    src=$SOURCE/$f
    target=$TARGET/.$f
    # Remove if target is symlink to src
    if [[ -L "$target" && $(readlink "$target") == $src ]]; then
      rm "$target"
      removed+=("$target")
    else
      kept+=("$target")
    fi
  done

  echo "Kept because not linked here:"
  printf "    %s\n" $kept
  echo "Removed:"
  printf "    %s\n" $removed
}

case $1 in
  install) check_src_files; install; exit 0;;
  remove) remove; exit 0;;
  help|--help|-h) print_usage 0;;
esac
print_usage 1
